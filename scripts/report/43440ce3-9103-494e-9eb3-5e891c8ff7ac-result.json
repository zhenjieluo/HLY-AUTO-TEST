{"name": "test_steal_oil_check_600", "status": "broken", "statusDetails": {"message": "serial.serialutil.SerialException: could not open port 'com5': PermissionError(13, '拒绝访问。', None, 5)", "trace": "self = <api.HLY_API.HLY_API object at 0x000001EDAD51B130>\n\n    def com_read(self):  # 串口读取\n        com = self.com\n        port = self.port\n        try:\n>           ser = serial.Serial(com, port)\n\n..\\api\\HLY_API.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Serial<id=0x1edbd03ef40, open=False>(port='com5', baudrate=115200, bytesize=8, parity='N', stopbits=1, timeout=None, xonxoff=False, rtscts=False, dsrdtr=False)\nargs = ('com5', 115200), kwargs = {}\n\n    def __init__(self, *args, **kwargs):\n        self._port_handle = None\n        self._overlapped_read = None\n        self._overlapped_write = None\n>       super(Serial, self).__init__(*args, **kwargs)\n\n..\\..\\..\\.virtualenvs\\HLY-AUTO-TEST\\lib\\site-packages\\serial\\serialwin32.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Serial<id=0x1edbd03ef40, open=False>(port='com5', baudrate=115200, bytesize=8, parity='N', stopbits=1, timeout=None, xonxoff=False, rtscts=False, dsrdtr=False)\nport = 'com5', baudrate = 115200, bytesize = 8, parity = 'N', stopbits = 1\ntimeout = None, xonxoff = False, rtscts = False, write_timeout = None\ndsrdtr = False, inter_byte_timeout = None, exclusive = None, kwargs = {}\n\n    def __init__(self,\n                 port=None,\n                 baudrate=9600,\n                 bytesize=EIGHTBITS,\n                 parity=PARITY_NONE,\n                 stopbits=STOPBITS_ONE,\n                 timeout=None,\n                 xonxoff=False,\n                 rtscts=False,\n                 write_timeout=None,\n                 dsrdtr=False,\n                 inter_byte_timeout=None,\n                 exclusive=None,\n                 **kwargs):\n        \"\"\"\\\n        Initialize comm port object. If a \"port\" is given, then the port will be\n        opened immediately. Otherwise a Serial port object in closed state\n        is returned.\n        \"\"\"\n    \n        self.is_open = False\n        self.portstr = None\n        self.name = None\n        # correct values are assigned below through properties\n        self._port = None\n        self._baudrate = None\n        self._bytesize = None\n        self._parity = None\n        self._stopbits = None\n        self._timeout = None\n        self._write_timeout = None\n        self._xonxoff = None\n        self._rtscts = None\n        self._dsrdtr = None\n        self._inter_byte_timeout = None\n        self._rs485_mode = None  # disabled by default\n        self._rts_state = True\n        self._dtr_state = True\n        self._break_state = False\n        self._exclusive = None\n    \n        # assign values using get/set methods using the properties feature\n        self.port = port\n        self.baudrate = baudrate\n        self.bytesize = bytesize\n        self.parity = parity\n        self.stopbits = stopbits\n        self.timeout = timeout\n        self.write_timeout = write_timeout\n        self.xonxoff = xonxoff\n        self.rtscts = rtscts\n        self.dsrdtr = dsrdtr\n        self.inter_byte_timeout = inter_byte_timeout\n        self.exclusive = exclusive\n    \n        # watch for backward compatible kwargs\n        if 'writeTimeout' in kwargs:\n            self.write_timeout = kwargs.pop('writeTimeout')\n        if 'interCharTimeout' in kwargs:\n            self.inter_byte_timeout = kwargs.pop('interCharTimeout')\n        if kwargs:\n            raise ValueError('unexpected keyword arguments: {!r}'.format(kwargs))\n    \n        if port is not None:\n>           self.open()\n\n..\\..\\..\\.virtualenvs\\HLY-AUTO-TEST\\lib\\site-packages\\serial\\serialutil.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Serial<id=0x1edbd03ef40, open=False>(port='com5', baudrate=115200, bytesize=8, parity='N', stopbits=1, timeout=None, xonxoff=False, rtscts=False, dsrdtr=False)\n\n    def open(self):\n        \"\"\"\\\n        Open port with current settings. This may throw a SerialException\n        if the port cannot be opened.\n        \"\"\"\n        if self._port is None:\n            raise SerialException(\"Port must be configured before it can be used.\")\n        if self.is_open:\n            raise SerialException(\"Port is already open.\")\n        # the \"\\\\.\\COMx\" format is required for devices other than COM1-COM8\n        # not all versions of windows seem to support this properly\n        # so that the first few ports are used with the DOS device name\n        port = self.name\n        try:\n            if port.upper().startswith('COM') and int(port[3:]) > 8:\n                port = '\\\\\\\\.\\\\' + port\n        except ValueError:\n            # for like COMnotanumber\n            pass\n        self._port_handle = win32.CreateFile(\n            port,\n            win32.GENERIC_READ | win32.GENERIC_WRITE,\n            0,  # exclusive access\n            None,  # no security\n            win32.OPEN_EXISTING,\n            win32.FILE_ATTRIBUTE_NORMAL | win32.FILE_FLAG_OVERLAPPED,\n            0)\n        if self._port_handle == win32.INVALID_HANDLE_VALUE:\n            self._port_handle = None    # 'cause __del__ is called anyway\n>           raise SerialException(\"could not open port {!r}: {!r}\".format(self.portstr, ctypes.WinError()))\nE           serial.serialutil.SerialException: could not open port 'com5': PermissionError(13, '拒绝访问。', None, 5)\n\n..\\..\\..\\.virtualenvs\\HLY-AUTO-TEST\\lib\\site-packages\\serial\\serialwin32.py:64: SerialException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_steal_oil_check_600():\n        print('已开始进行偷油量大于400功能测试')\n        while True:\n>           start_collect = re.search('sent done', HLY.com_read())\n\ntest_oil_change_check.py:333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\api\\HLY_API.py:45: in com_read\n    ser = serial.Serial(com, port)\n..\\..\\..\\.virtualenvs\\HLY-AUTO-TEST\\lib\\site-packages\\serial\\serialwin32.py:33: in __init__\n    super(Serial, self).__init__(*args, **kwargs)\n..\\..\\..\\.virtualenvs\\HLY-AUTO-TEST\\lib\\site-packages\\serial\\serialutil.py:244: in __init__\n    self.open()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Serial<id=0x1edbd03ee80, open=False>(port='com5', baudrate=115200, bytesize=8, parity='N', stopbits=1, timeout=None, xonxoff=False, rtscts=False, dsrdtr=False)\n\n    def open(self):\n        \"\"\"\\\n        Open port with current settings. This may throw a SerialException\n        if the port cannot be opened.\n        \"\"\"\n        if self._port is None:\n            raise SerialException(\"Port must be configured before it can be used.\")\n        if self.is_open:\n            raise SerialException(\"Port is already open.\")\n        # the \"\\\\.\\COMx\" format is required for devices other than COM1-COM8\n        # not all versions of windows seem to support this properly\n        # so that the first few ports are used with the DOS device name\n        port = self.name\n        try:\n            if port.upper().startswith('COM') and int(port[3:]) > 8:\n                port = '\\\\\\\\.\\\\' + port\n        except ValueError:\n            # for like COMnotanumber\n            pass\n        self._port_handle = win32.CreateFile(\n            port,\n            win32.GENERIC_READ | win32.GENERIC_WRITE,\n            0,  # exclusive access\n            None,  # no security\n            win32.OPEN_EXISTING,\n            win32.FILE_ATTRIBUTE_NORMAL | win32.FILE_FLAG_OVERLAPPED,\n            0)\n        if self._port_handle == win32.INVALID_HANDLE_VALUE:\n            self._port_handle = None    # 'cause __del__ is called anyway\n>           raise SerialException(\"could not open port {!r}: {!r}\".format(self.portstr, ctypes.WinError()))\nE           serial.serialutil.SerialException: could not open port 'com5': PermissionError(13, '拒绝访问。', None, 5)\n\n..\\..\\..\\.virtualenvs\\HLY-AUTO-TEST\\lib\\site-packages\\serial\\serialwin32.py:64: SerialException"}, "start": 1657070039298, "stop": 1657070039298, "uuid": "f71a11b9-2a1b-4aa0-a47f-77fe8e1974ca", "historyId": "1328f07d7f10aeb9022946b16f96f751", "testCaseId": "5cb7e212355a1f115032116383772327", "fullName": "scripts.test_oil_change_check#test_steal_oil_check_600", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test_oil_change_check"}, {"name": "host", "value": "HONGCHA"}, {"name": "thread", "value": "5980-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test_oil_change_check"}]}